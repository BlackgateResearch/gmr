(dp1
S'output'
p2
S''
sS'layer'
p3
S'Processing View appadmin.html'
p4
sS'code'
p5
S'{{extend "plugin_layouts/layouts/CityLights.html"}}\n<script><!--\njQuery(document).ready(function(){\n  jQuery("table.sortable tbody tr").mouseover( function() {\n     jQuery(this).addClass("highlight"); }).mouseout( function() { \n     jQuery(this).removeClass("highlight"); });\n  jQuery(\'table.sortable tbody tr:odd\').addClass(\'odd\');\n  jQuery(\'table.sortable tbody tr:even\').addClass(\'even\');\n});\n//--></script>\n\n{{if request.function==\'index\':}}\n  <h1>{{=T("Available databases and tables")}}</h1>\n  {{if not databases:}}{{=T("No databases in this application")}}{{pass}}\n  {{for db in sorted(databases):}}\n    {{for table in databases[db].tables:}}\n      {{qry=\'%s.%s.id>0\'%(db,table)}}\n      {{tbl=databases[db][table]}}\n      {{if hasattr(tbl,\'_primarykey\'):}}\n        {{firstkey=tbl[tbl._primarykey[0]]}}\n        {{if firstkey.type in [\'string\',\'text\']:}}\n          {{qry=\'%s.%s.%s!=""\'%(db,table,firstkey.name)}}\n        {{else:}}\n          {{qry=\'%s.%s.%s>0\'%(db,table,firstkey.name)}}\n        {{pass}}\n      {{pass}}\n      <h2>{{=A("%s.%s"%(db,table),_href=URL(r=request,f=\'select\',args=[db],vars=dict(query=qry)))}}</h2>\n      [ {{=A(str(T(\'insert new\'))+\' \'+table,_href=URL(r=request,f=\'insert\',args=[db,table]))}} ]\n    <br /><br />\n    {{pass}}\n  {{pass}}\n\n\n{{elif request.function==\'select\':}}\n  <h1>{{=XML(str(T("database %s select"))%A(request.args[0],_href=URL(r=request,f=\'index\'))) }}\n  </h1>\n   {{if table:}}\n  [ {{=A(str(T(\'insert new %s\'))%table,_href=URL(r=request,f=\'insert\',args=[request.args[0],table]))}} ]<br/><br/>\n    <h2>{{=T("Rows in table")}}</h2><br/>\n   {{else:}}\n    <h2>{{=T("Rows selected")}}</h2><br/>\n   {{pass}}\n   {{=form}}\n   <p>{{=T(\'The "query" is a condition like "db.table1.field1==\\\'value\\\'". Something like "db.table1.field1==db.table2.field2" results in a SQL JOIN.\')}}<br/>\n      {{=T(\'Use (...)&(...) for AND, (...)|(...) for OR, and ~(...)  for NOT to build more complex queries.\')}}<br/>\n      {{=T(\'"update" is an optional expression like "field1=\\\'newvalue\\\'". You cannot update or delete the results of a JOIN\')}}</p>\n    <br/><br/>\n    <h3>{{=nrows}} {{=T("selected")}}</h3>\n    {{if start>0:}}[ {{=A(T(\'previous 100 rows\'),_href=URL(r=request,f=\'select\',args=request.args[0],vars=dict(start=start-100)))}} ]{{pass}}\n    {{if stop<nrows:}}[ {{=A(T(\'next 100 rows\'),_href=URL(r=request,f=\'select\',args=request.args[0],vars=dict(start=start+100)))}} ]{{pass}}    \n    {{if rows:}}\n       <div style="overflow: auto;" width="80%">\n       {{linkto=URL(r=request,f=\'update\',args=request.args[0])}}\n       {{upload=URL(r=request,f=\'download\',args=request.args[0])}}    \n       {{=SQLTABLE(rows,linkto,upload,orderby=True,_class=\'sortable\')}}\n       </div>\n    {{pass}}\n    <br/><br/><h2>{{=T("Import/Export")}}</h2><br/>\n    [ <a href="{{=URL(r=request,f=\'csv\',args=request.args[0],vars=dict(query=query))}}">{{=T("export as csv file")}}</a> ]\n  {{if table:}}\n    {{=FORM(str(T(\'or import from csv file\'))+" ",INPUT(_type=\'file\',_name=\'csvfile\'),INPUT(_type=\'hidden\',_value=table,_name=\'table\'),INPUT(_type=\'submit\',_value=\'import\'))}}\n  {{pass}}\n\n\n{{elif request.function==\'insert\':}}  \n  <h1>{{=T("database")}} {{=A(request.args[0],_href=URL(r=request,f=\'index\'))}}\n    {{if hasattr(table,\'_primarykey\'):}}\n      {{fieldname=table._primarykey[0]}}\n      {{dbname=request.args[0]}}\n      {{tablename=request.args[1]}}\n      {{cond = \'!=""\' if table[fieldname].type in [\'string\',\'text\'] else \'>0\'}}\n      {{=T("table")}} {{=A(tablename,_href=URL(r=request,f=\'select\',args=dbname,vars=dict(query=\'%s.%s.%s%s\'%(dbname,tablename,fieldname,cond))))}}\n    {{else:}}  \n      {{=T("table")}} {{=A(request.args[1],_href=URL(r=request,f=\'select\',args=request.args[0],vars=dict(query=\'%s.%s.id>0\'%tuple(request.args[:2]))))}}\n    {{pass}}\n  </h1>\n  <h2>{{=T("New Record")}}</h2><br/>\n  {{=form}}\n\n\n\n{{elif request.function==\'update\':}}\n  <h1>{{=T("database")}} {{=A(request.args[0],_href=URL(r=request,f=\'index\'))}}\n    {{if hasattr(table,\'_primarykey\'):}}\n      {{fieldname=request.vars.keys()[0]}}\n      {{dbname=request.args[0]}}\n      {{tablename=request.args[1]}}\n      {{cond = \'!=""\' if table[fieldname].type in [\'string\',\'text\'] else \'>0\'}}\n      {{=T("table")}} {{=A(tablename,_href=URL(r=request,f=\'select\',args=dbname,vars=dict(query=\'%s.%s.%s%s\'%(dbname,tablename,fieldname,cond))))}}\n      {{=T("record")}} {{=A(\'%s=%s\'%request.vars.items()[0],_href=URL(r=request,f=\'update\',args=request.args[:2],vars=request.vars))}}\n    {{else:}}\n      {{=T("table")}} {{=A(request.args[1],_href=URL(r=request,f=\'select\',args=request.args[0],vars=dict(query=\'%s.%s.id>0\'%tuple(request.args[:2]))))}}\n      {{=T("record id")}} {{=A(request.args[2],_href=URL(r=request,f=\'update\',args=request.args[:3]))}}\n    {{pass}}\n  </h1>\n  <h2>{{=T("Edit current record")}}</h2><br/><br/>{{=form}}\n\n\n\n{{elif request.function==\'state\':}}\n  <h1>{{=T("Internal State")}}</h1>\n  <h2>{{=T("Current request")}}</h2>\n  {{=BEAUTIFY(request)}}\n  <br/><h2>{{=T("Current response")}}</h2>\n  {{=BEAUTIFY(response)}}\n  <br/><h2>{{=T("Current session")}}</h2>\n  {{=BEAUTIFY(session)}}\n{{pass}}\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/home/oatman/web2py/gluon/template.py", line 121, in parse_template\n    fp = open(t, \'rb\')\nIOError: [Errno 2] No such file or directory: \'/home/oatman/web2py/applications/gmr/views/plugin_layouts/layouts/CityLights.html\'\n'
p8
s.
(dp1
S'output'
p2
S''
sS'layer'
p3
S'/home/oatman/web2py/applications/gmr/models/db.py'
p4
sS'code'
p5
S'# coding: utf8\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n#########################################################################\n\nif request.env.web2py_runtime_gae:            # if running on Google App Engine\n    db = DAL(\'gae\')                           # connect to Google BigTable\n    session.connect(request, response, db=db) # and store sessions and tickets there\n    ### or use the following lines to store sessions in Memcache\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db=MEMDB(Client())\nelse:                                         # else use a normal relational database\n    db = DAL(\'sqlite://storage.sqlite\')       # if not, use SQLite or other DB\n## if no need for session\n# session.forget()\n\n#########################################################################\n## Here is sample code if you need for \n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - crud actions\n## comment/uncomment as needed\n\nfrom gluon.tools import *\nauth=Auth(globals(),db)                      # authentication/authorization\nauth.settings.hmac_key=\'sha512:50646864-d10a-4c9c-a9b8-f2ddea4712bc\'\nauth.define_tables()                         # creates all needed tables\ncrud=Crud(globals(),db)                      # for CRUD helpers using auth\nservice=Service(globals())                   # for json, xml, jsonrpc, xmlrpc, amfrpc\n\n# crud.settings.auth=auth                      # enforces authorization on crud\n# mail=Mail()                                  # mailer\n# mail.settings.server=\'smtp.gmail.com:587\'    # your SMTP server\n# mail.settings.sender=\'you@gmail.com\'         # your email\n# mail.settings.login=\'username:password\'      # your credentials or None\n# auth.settings.mailer=mail                    # for user email verification\n# auth.settings.registration_requires_verification = True\n# auth.settings.registration_requires_approval = True\n# auth.messages.verify_email = \\\n#  \'Click on the link http://.../user/verify_email/%(key)s to verify your email\'\n## more options discussed in gluon/tools.py\n#########################################################################\n\n#########################################################################\n## Define your tables below, for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\ndb.define_table(\'artistInfo\',\n    Field(\'user_id\',db.auth_user),\n    Field(\'description\'),\n)\n\ndb.define_table(\'track\',\n    Field(\'artist_id\',db.artistInfo),\n    Field(\'name\'),\n    Field(\'description\'),\n    Field(\'upload\'),\n#   PASS\n    Field(\'positivity\'),\n    Field(\'aggression\'),\n    Field(\'speed\'),\n    Field(\'suspense\')\n)\n\ndb.define_table(\'playlist\',\n    Field(\'name\'),\n    Field(\'user_id\',db.auth_user)\n)\n\ndb.define_table(\'playlist_track\',\n    Field(\'playlist_id\',db.playlist),\n    Field(\'track_id\',db.track)\n)\n\ndb.define_table(\'nudge\',\n    Field(\'user_id\',db.auth_user),\n    Field(\'track_id\',db.track),\n    Field(\'datestamp\',datetime)\n    Field(\'datetime\', "DATETIME", notnull=True, default=now)\n)\n'
p6
sS'traceback'
p7
S'Traceback (most recent call last):\n  File "/home/oatman/web2py/gluon/restricted.py", line 182, in restricted\n    ccode = compile(code.replace(\'\\r\\n\', \'\\n\'), layer, \'exec\')\n  File "/home/oatman/web2py/applications/gmr/models/db.py", line 96\n    Field(\'datetime\', "DATETIME", notnull=True, default=now)\n        ^\nSyntaxError: invalid syntax\n'
p8
s.